# Elasticsearch , URL : https://choseongho93.tistory.com/231
Apache Lucene(아파치 루씬) 기반의 java 오픈소스 분산 검색 엔진입니다.
"데이터 저장소"가 아니라 MySQL같은 데이터베이스를 대체할 수 없습니다.
방대한 양의 데이터를 신속하고 거의 실시간으로 저장,검색,분석할 수 있습니다.
Elasticsearch는 검색을 위해 단독으로 사용되기도 하며,  ELK( Elasticsearch / Logstatsh / Kibana )스택으로 사용

ELK( Elasticsearch / Logstatsh / Kibana ) 스택
ElasticSearch : 분석 및 저장 기능을 담당
Logstash : 수집 기능 담당
Kibana : 시각화 도구
-> ELK는 접근성과 용이성이 좋아 최근 가장 핫한 Log 및 데이터 분석 도구

# 사용 이유
- 속도가 빠름
- 분산적(샤드), 확장성, 대용량 데이터 처리 가능
- 다양한 기능 제공 (데이터 롤업, 인덱스 수명주기 등)
- 데이터 수집, 시각화 보고 간소화
Elasticsearch는 빠릅니다. Elasticsearch는 Lucene을 기반으로 구축되기 때문에, 전체 텍스트 검색에 뛰어납니다. Elasticsearch는 또한 거의 실시간 검색 플랫폼입니다. 이것은 문서가 색인될 때부터 검색 가능해질 때까지의 대기 시간이 아주 짧다는 뜻입니다. 이 대기 시간은 보통 1초입니다. 결과적으로, Elasticsearch는 보안 분석, 인프라 모니터링 같은 시간이 중요한 사용 사례에 이상적입니다.

Elasticsearch는 본질상 분산적입니다. Elasticsearch에 저장된 문서는 샤드라고 하는 여러 다른 컨테이너에 걸쳐 분산되며, 이 샤드는 복제되어 하드웨어 장애 시에 중복되는 데이터 사본을 제공합니다. Elasticsearch의 분산적인 특징은 수백 개(심지어 수천 개)의 서버까지 확장하고 페타바이트의 데이터를 처리할 수 있게 해줍니다.




# 이해
1. 클러스터
- 클러스터는 하나 이상의 노드(서버)가 모인 것이며, 이를 통해 전체 데이터를 저장하고 모든 노드를 포관하는 통합 색인화 및 검색 기능을 제공
 -> 이름에 의해 클러스터의 구성원이 됨, 중요한 부분

2. 인덱스
- 색인은 다소 비슷한 특성을 가진 문서의 모음
- 고객 데이터에 대한 색인, 제품 카탈로그에 대한 색인, 주문 데이터에 대한 색인 등
- 색인은 이름(모두 소문자여야함)으로 식별, 이 이름은 색인에 포함된 문서에 대한 색인화, 검색, 업데이트, 삭제 작업에서 해당 색인을 가르키는데 쓰인다.

3. 타입
- 하나의 색인에서 하나 이상의 유형을 정의
- 유형은 색인을 논리적으로 분류/구분한 것, 그 의미 체계는 전적으로 사용자가 결정
- 일반적으로 여러 공통된 필드를 갖는 문서에 대해 유형이 정의
- 예를 들어 블로그 플랫폼을 운영하고 있는데 모든 데이터를 하나의 색인에 저장한다고 가정하면, 이 색인에서 사용자 데이터, 블로그 데이터, 댓글 데이터에 대한 유형을 각각 정의

4. 도큐먼트
- 도큐먼트는 색인화 할 수 있는 기본 정보 단위
- 어떤 단일 고객, 단일 제품, 단일 주문에 대한 도큐먼트가 각각 존재할 수 있음
- 이 문서는 JSON(JavaScript Object Notation)형식인데, 이는 널리 사용되는 인터넷 데이터 교환 형식

6. 샤드 & 리플리카
- 색인은 방대한 양의 데이터를 저장할 수 있음
- 데이터가 단일 노드의 하드웨어 한도를 초과할 수도 있기에
-> 예로, 10억 개의 문서로 구성된 하나의 색인데 1TB의 디스크 공간이 필요할 경우, 단일 노드의 디스크에서 수용하지 못하거나 단일 노드에서 검색 요청 처리 시 속도가 너무 느려질 수 있음
-> 이를위해, 샤드(shard)라는 조각으로 분할하는 기능 제공
 : 색인을 생성할 때 원하는 샤드 수를 간단히 정의. 
   샤드는 그 자체가 온전한 기능을 가진 독립적인 "색인"이며, 클러스터의 어떤 노드에서도 호스팅할 수 있음

샤딩은 다음과 같은 2가지 중요한 이유
- 콘텐츠 볼륨의 수평 분할/확장이 가능해짐
- 작업을(어쩌면 여러 노드에 위치한) 여러 샤드에 분산 배치하고 병렬화함으로써 성능/처리량을 늘릴 수 있음
샤드가 분산 배치되는 방식 및 그 도큐먼트가 다시 검색 요청으로 집계되는 방식의 메커니즘은 모두 Elasticsearch에서 관리하며 사용자에게는 투명하게 이루어진다.
언제든 오류가 일어날 가능성이 있는 네트워크/클라우드 환경에서는 어떤 이유에서든 샤드/노드가 오프라인 상태가 되거나 사라지게 될 경우에 대비하여 Fail-Over 매커니즘을 마련하는 것이 매우 유익하고 바람직하다. 이러한 취지에서 Elasticsearch에서는 색인의 샤드에 대해 하나 이상의 복사본을 생성할 수 있는데, 이를 리플리카 샤드(replica shard), 줄여서 리플리카라고 한다.

리플리카를 만드는 복제는 다음과 같은 2가지 중요한 이유가 있다.
- 샤드/노드 오류가 발생하더라도 고가용성을 제공한다. 따라서 리플리카 샤드는 그 원본인 기본 샤드와 동일한 노드에 배정되지 않는다.
- 모든 리플리카에서 병렬 방식으로 검색을 실행할 수 있으므로 검색 볼륨/처리량을 확장할 수 있다.

## 요약
- 요약하자면 각 색인은 여러 개의 샤드로 분할할 수 있음.
- 하나의 색인은 복제하지 않거나(리플리카 없음) 1회 이상 복제할 수 있고, 복제되면 각 색인은 기본 샤드(복제 원본 샤드)와 리플리카 샤드(기본 샤드의 복사본)를 갖음
- 샤드 및 리플리카의 수는 색인별로, 색인 생성 시점에 정의할 수 있음
- 색인이 생성된 다음 언제라도 탄력적으로 리플리카의 수를 변경할 수 있으나, 샤드 수는 사후 변경이 불가능
 
기본적으로 Elasticsearch의 각 색인은 기본 샤드 5개, 리플리카 1개를 갖는다.
따라서 클러스터에 최소한 2개의 노드가 있다면 색인은 기본 샤드 5개, 리플리카 샤드 5개(완전한 리플리카 1개)를 가지므로 색인당 총 10개의 샤드가 존재하게 된다.

- 각 Elasticsearch 샤드는 Lucene 색인.
- 단일 Lucene 색인이 포함할 수 있는 문서 수의 최대 한도가 있고. LUCENE-5843에 따르면 2,147,483,519`개(= Integer.MAX_VALUE - 128)이다. {ref}/cat-shards.html[`_cat/shards] API를 사용하여 샤드 크기를 모니터링할 수 있음.


 

 