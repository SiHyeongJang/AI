# 2. Process & Thread
 : 프로세싱과 쓰레드, 코딩쪽보다는 os쪽 관련해서 있는것 같지만 파이썬 관련으로 쓰고싶어서 여기에 정리함.

참고 URL :
https://growingarchive.tistory.com/219
https://doorbw.tistory.com/26

## 프로세스
 : 컴퓨터에서 연속적으로 실행되고 있는(실행중인) 컴퓨터 프로그램을 의미
  -> 실행되기전의 명령어와 데이터의 묶음을 말하는데, 프로그램이 실행중에 있을 때 프로세스라고 함.
  -> 하드 디스크에 저장되어있는 명령어와 데이터의 묶음 -> 프로그램
  -> 프로그램을 구동해, 프로그램 자체와 프로그램의 상태가 메모리 상에서 실행되는 작업 단위 -> 프로세스
  
## 멀티프로세스
 : 사용자로 하여금 다수의 프로세스가 동시에 실행되는 것 처럼 보이게 만드는 것 (즉, CPU가 빠른 시간동안 각각의 프로세스를 순차적으로 실행하고 있는 것)

## 쓰레드
 : 어떤 프로세스 내에서 실행되는 흐름의 단위를 의미, 한 프로그램에는 하나의 쓰레드를 가지고 있음
  -> 환경에 따라 두 개 이상의 쓰레드를 동시에 실행 할 수 있음 (멀티 쓰레드)
 - 쓰레드가 필요한 이유 : 멀티 태스킹에서는 다수의 프로세스가 만들어져 순차적으로 실행됨.
    - 멀티 쓰레드로 효율적인 메모리 관리 가능
    - 프로세스간의 전환속도보다 쓰레드 간의 전환 속도가 더 빠름
    - 주의할 점 : 동일한 데이터를 전역변수로 사용하게되므로 다양한 문제점이 발생할 수 있음
 
종합적으로,
프로세스는 운영체제로부터 자원을 할당받는 작업의 단위 (프로세서, 필요한 주소 공간, 메모리 등의 자원 할당)
쓰레드는 프로세스가 할당받는 자원을 이용하는 실행 단위 (프로세스 내의 주소 공간이나 자원들을 같은 프로세스 내에 스레드끼리 공유)

파이썬은 기본적으로 인터프리터 언어로서 기본적인 싱글 쓰레드에서 순차적으로 동작함.
병렬처리를 위해서는 별도의 모듈을 사용하여 구현해야 함
2가지 방법 : threding 모듈(Low Level), multiprocessing 모듈(High Level)

주의할 점 : 파이썬의 GIL(Global Interpreter Lock) : 언어에서 자원을 보호하기 위해 락 정책을 사용하는데,
파이썬에서는 하나의 프로세스 안에 모든 자원의 락을 글로벌하게 관리함으로써 한번에 하나의 쓰레드만 자원을 컨트롤하여 동작하도록 함
CPU 동작을 마치고, I/O 작업을 실행하는 동안에는 다른 쓰레드가 CPU 동작을 동시에 실행할 수 있음 (멀티쓰레드가 성능적으로 좋을 환경)

추가적으로,
프로세스 제어 블록(PCB : Process Control Block)


