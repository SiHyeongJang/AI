참고 URL : https://doing7.tistory.com/75
- 이해가 잘 되게 설명이 잘 되어있음
다이나믹 프로그래밍 :
필요한 계산 값을 저장해두었다가 재사용하는 알고리즘 설계 기법
큰 문제를 한번에 해결하기 어려울 때, 여러개의 작은 문제로 나누어 푸는 '분할 정복' 알고리즘이 있다.
이때 동일한 작은 문제들이 반복적으로 계산되는 경우가 생길 수 있다.
그 문제를 매번 재계산 하지 않고 값을 저장했다가 재사용하는 기법이 바로 다이나믹 프로그래밍이다.
메모리 공간을 약간 더 사용하여 시간을 획기적으로 줄일 수 있는 방법

구현의  조건 : Problem, SubProblem 정의

가장 대표적인 예로 '피보나치 수열'이 있음

[재귀함수로 구현]
def fibo(x):
	if x==1 or x==2:
    	return 1
    return fibo(x-1) + fibo(x-2)
    
print(fibo(5))
시간복잡도 : O(2^N)

[TopDown]
 탑다운 방식은 메모이제이션을 사용하여 다이나믹 프로그래밍을 구현하는 방식, 메모리
 메모이제이션(memoiztion)이란 한번 구한 계산 결과를 메모리 공간에 메모해두고, 같은 식을 다시 호출하면 메모한 결과 그대로 가져오는 기법을 말한다. 탑다운 방식은 큰 문제를 해결하기 위해 작은 문제를 호출한다고 하여 하향식이라고도 불린다. 이러한 탑다운방식은 재귀함수를 이용하여 구현할 수 있음
단점 : Stack buffer overflow가 발생할 수 있음 
# 한번 게산된 결과를 메모이제이션하기 위한 리스트
memo = [0]*100

# 피보나치 수열을 재귀함수로 구현(topdown)
def fibo(x):
  # fibo(1)=fibo(2)=0
  if x==1 or x==2:
    return 1

  # 이미 계산한 적있는 문제라면 그대로 반환
  if memo[x] != 0:
    return memo[x]

  # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
  memo[x] = fibo(x-1)+fibo(x-2)
  return memo[x]

print(fibo(99))


[Bottom-Up]
보텀업 방식은 타블레이션(tabulation)을 사용하여 다이나믹 프로그래밍을 구현하는 방식
타블레이션(tabulation)이란 하위 문제부터 천천히 해결하면서 더 큰 문제를 해결하는 기법
타블레이션이라고 부르는 이유는 작은 문제부터 큰 문제까지 하나하나 테이블을 채워간다는 의미
보텀업 방식은 하위 문제부터 시작해서 더 큰 문제를 해결해 나가기 때문에 상향식
다이나믹 프로그래밍의 전형적인 형태는 바로 이 보텀업 방식, 반복문을 이용하여 구현할 수 있음

시간복잡도 : o(N) 공간복잡도 :  o(N) 피보나치 수열 같은경우 앞의 2개만 필요하기때문에 ->1 복잡도를 만들 수 있음

# 작은 문제부터 해결해서 저장할 dp테이블
dp = [0]*100

# fibo(1)=fibo(2)=0
dp[1]=1
dp[2]=1
n=99

# 피보나치 수열을 반복문으로 구현(bottom up)
for i in range(3, n+1):
  dp[i] = dp[i-1]+dp[i-2]

print(dp[n])