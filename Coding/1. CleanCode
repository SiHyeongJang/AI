# 1. CleanCode
참고 URL : https://www.samsungsds.com/kr/insights/cleancode-0823.html // 삼성 SDS
   - URL2 : https://github.com/gyoogle/tech-interview-for-developer

정의 : 쉽게 이해하면, 읽기 쉬운 코드. 다양한 유명한 개발자 분들의 정의가 비슷하지만 조금씩 다르다.
 - C++의 창시자인 Bjarne Stroustrup : 코드가 우아하다는 의미는 군더더기 없이 깔끔하다는 의미와, 효과적이라는 것은 기능을 수행하는 코드를 최대한 작은 라인으로 구현
 - James Rumbaugh, Ivar Jacobson과 함께 UML(Unified Modeling Language) Grady Booch : 단순하고 직접적이며,  원작자의 의도를 숨기지 않음
 -> 종합적으로, 가독성을 강조(understandability) - 알기 쉬움

구현해야할 방향성 :
- 네이밍이 잘 되어야 함
- 오류가 없어야 함
- 중복이 없어야 함
- 의존성을 최대한 줄여야 함
- 클래스 혹은 메소드가 한가지 일만 처리해야 함

구체적인 방법 :
- 함수 네이밍 : 다른 사람들이 봐도 무슨 역할을 하는 함수인 지 알 수 있는 이름을 사용
- 함수와 함수 사이의 간격 : 여러 함수가 존재할 때 간격을 나누지 않으면 시작과 끝을 구분하는 것이 매우 힘들다.

## 가독성이 중요한 이유
일반적으로, 기존 코드를 변경하고자 할 때, 해석하는 시간과 수정하는 비율이 10:1이라고 함

## Technical Debt
Technical Debt(기술 부채, 기술적인 빚) : 은유적인 표현으로 개발 단계에서 제대로 개발을 해놓지 못하면, 그게 빚이 되어 나중에 이자로 돌아와 더 많은 일을 해야한다는 뜻
위를 읽고 이 부분을 이해한다면, 개발 및 인수인계 후 다시 수정사항이 있다면 분석 후 다시 개발하기에 시간이 오래걸린다는 의미
원인으로는 다음과 같이 정리되어 있어서 참고 하였음.
참고 URL :  https://bcho.tistory.com/811
 ①   비지니스 조직으로 부터의 무리한 압박 : 시장 출시를 맞추기 위해서 무리한 일정이나 무리하게 적은 예산으로 진행한 경우, 소프트웨어의 품질에 문제가 생기고, 결국 나중에 이 부분을 다시 보강해야 한다.
 ②   부정확한 요구 사항이나 잦은 변경 : 요구 사항이 정확하지 않게 정의 되면 시스템의 기능이 제대로 개발되지 않고 프로젝트 후반에 집중되는 경향이 있으며, 이는 심각한 일정과 품질 문제로 연결 된다.
 ③   잘못된 의사 결정 프로세스 : 비지니스 쪽에서 일정 변경이나 요구 사항 변경에 대한 implication (영향도)를 인지하지 못하고, 일정이나 비용등에 없이 변경을 하면 결국 문제가 발생하고 Technical debt의 원인이 된다. 이는 잘못된 의사 결정 프로세스에서 기인 한다.
 ④   부족한 협업 : 팀간의 협업 부족으로 서로 정보가 공유되지 않거나 정보가 오역되는 경우
 ⑤   부족한 테스팅 : 테스팅의 부족으로 인하여 소프트웨어의 품질이 심각하게 저하되는 경우
 ⑥   부족한 문서화 : 문서화의 부족으로 향후 참고할 자료가 없는 경우
 ⑦   Refactoring 지연 : Refactoring을 미루다가, 소프트웨어 품질이 저하된 경우
 ⑧   낮은 수준의 아키텍쳐 설계 : 아키텍쳐 설계가 유연하지 않아서 향후 요구 사항에 대한 반영이 어려운 경우. 또는 용량이나 성능에 대한 부분이 충분히 고려되지 않아서 향후 용량 초과시 문제가 되는 경우
설명에 따르면, Technical Debt이 없는게 좋은게 아니라 적정비율이 중요함을 강조함

## Refactoring
Technical Debt에서 7번의 리팩토링을 설명하자면, 프로그램 외부 동작은 그대로 둔 채, 내부의 코드를 정리하면서 개선
 - ex) 이미 완공된 집이지만, 안정성을 위하여 내부 구조를 개선하는 리모델링 작업
 - fact) 프로젝트가 끝나면, 지저분한 코드를 볼 때 가독성이 떨어지는 부분이 존재하는데, 이 부분을 개선하는 부분이 리펙토링 기법

[리펙토링 목적] : 소프트웨어를 더 이해하기 쉽고 수정하기 쉽게 만듦

[리펙토링 대상]
- 중복 코드
- 긴 메소드
- 거대한 클래스
- Switch 문
- 절차지향으로 구현한 코드


